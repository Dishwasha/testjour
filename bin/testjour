#!/usr/bin/env ruby
require "rubygems"
require "dnssd"
require "set"

Thread.abort_on_exception = true

module Testjour
  Server  = Struct.new(:name, :host, :port)
  PORT    = 8808
  SERVICE = "_testjour._tcp"

  def self.usage
    puts <<-HELP
Usage:

serve [<name>] [<port>]
  Start up a test running server as <name> on <port>. <name> is your username
  by default, and <port> is 8088. If you want to use the default <name>,
  pass it as "".

list
  List all available test running servers.

    HELP
  end

  def self.list(*args)
    hosts = []

    waiting = Thread.current

    service = DNSSD.browse(SERVICE) do |reply|
      DNSSD.resolve(reply.name, reply.type, reply.domain) do |rr|
        host = Server.new(reply.name, rr.target, rr.port)
        unless hosts.include? host
          puts "#{host.name} (#{host.host}:#{host.port})"
          hosts << host
        end
      end
    end

    sleep 5
    service.stop
  end

  def self.serve(name="", port=PORT)
    name = ENV['USER'] if name.empty?

    tr = DNSSD::TextRecord.new
    tr['description'] = "#{name}'s gem server"
    
    DNSSD.register(name, SERVICE, "local", port, tr.encode) do |reply|
      puts "Serving gems under name '#{name}'..."
    end
    
    sleep 60
  end

end


begin
  cmd = ARGV.shift

  case cmd
  when "serve"
    Testjour.serve(*ARGV)
  when "list"
    Testjour.list(*ARGV)
  else
    Testjour.usage
  end

rescue => e
  puts "ERROR: running '#{cmd}': #{e.message} (#{e.class})"
  puts
  Testjour.usage
end